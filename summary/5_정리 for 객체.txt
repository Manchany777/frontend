Parameter(파라미터) - 매개변수 
	-> 함수나 메서드 입력 변수(Variable)명
Arguement(아규먼트) - 전달인자 
	-> 함수나 메서드 (호출시 전달 혹은 입력되는 실제) 입력 값(Value)

              js              일반 프로그램
속성 -> 프로퍼티(P) -> 변수(Variable)
           메소드(M) -> 함수(function)

모든 객체는 속성(특징, 변수로 표현)과 메소드(동작 즉 행동, 함수로 표현)가 있다.
함수는 정의 해놓고 필요할 때마다 호출하는 거다


1. 변수와 상수
*변수
var(전역변수) -> 프로그램 전체에 영향을 미침
let(지역변수) -> 일정 지역에만 영향을 미침
  for (let i=0; i<3; i++) {
    }
*상수
const pi = 3.14; -> 한 번 셋팅되면 프로그램 전체에 초기화가 안 됨

전역함수 예시) isNaN (Not a Number)
eval(exp(expression, 계산식)) -> 현재는 보안문제로 권장x

2. 산술(%,사칙), 비교(==,!=,), 논리(&&,||), 대입(=,+=)
1) 산술연산자 : +, -, *, %(나머지), **(지수 연산자, 2의 2승...)
2) 비교연산자 : ==, !=, >, <, >-, <= 
3) 논리연산자 : &&(and), ||(or), !(not)
4) 대입연산자 : 왼쪽변수에 오른쪽 값을 대입
                     -= (왼쪽의 변수가 가진 값에서 오른쪽 값을 빼서 다시 왼쪽 변수에 대입)
                     += (왼쪽의 변수가 가진 값에서 오른쪽 값을 더해서 다시 왼쪽 변수에 대입)
                     변수++(변수의 값에 1을 더한다.)
                     변수-- (변수의 값에 1을 뺀다.)

3. 데이터타입
숫자, 문자열, boolean(true/false), undefined, null, 코어객체(배열(Array), Date, String, Math 등.) 

*배열(Array)
a=3, b='hello', c=true, xx, xx,, 
arr = ['a', 'b', 'c', 'd', 'e', 'f']
arr[0] <= indexing / 0,1,2... <== index / 'a','b','c'... <== 요소, 원소, element

4. 조건문
if, if-else, if-else if-else, 
중첩if문, 
(그외 switch-case 등)


5. 반복문
for, while, (그외 do-while 등)
반복횟수 정해져있음, 반복횟수 정해지지x 특정조건 만족할때까지


6. 함수
정의, 호출
function 함수의 이름(매개변수1, 매개변수2) {
	코드1;                              	<== 함수의 정의
	코드2;
	return 반환값;
}

함수의 이름(인자1, 인자2)                               <== 인자는 매개변수와 동일한 개수로 맞춰줘야


7. 객체
1) 빈객체(new Object) 만들고 속성(변수)과 메소드 추가
2) 리터럴방식(json)으로 선언하고 사용 (키(key)d와 값(value)로 이루어진)
3) 프로토타입 이용해서 객체 생성
    (객체 모양을 가진 틀)

클래스 - 설계도
객체 - 설계도로 찍어낸 물건
	프로퍼티 - 객체의 고유한 속성(변수)
	메소드 - 동작(함수)
obj.프로퍼티 = value
변수 = obj.프로퍼티


8. BOM, DOM, 코어객체
DOM객체를 만드는 두 가지 방법
1. 바디의 선택자를 만들거나
2. body 스크립트에 직접 적거나

변수 < 조건문/반복문 < 함수 < 객체


new는 객체를 만들어 준다는데 무슨 말인가?


자바스크립트는 반복문 시작값을 암묵적으로 ijklmn...순으로 준다