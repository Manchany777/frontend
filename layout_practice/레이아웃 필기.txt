어셈블리어 or 어셈블러 -> 저급언어

컴파일 -> 고급 언어로 작성한 코드를 번역해줄 과정
컴파일러 방식 or 인터프리터 방식 -> 번역을 하는 방식

컴파일러 -> 프로그램 전체를 스캔 후 실행파일 생성 / 초기 시간 오래걸림 / 많은 메모리 사용
                 실행전 오류 발견할 수 있다 / C, C++, JAVA 등
인터프리터 -> 한 번에 한 문장씩 번역 / 실행시간 더 걸림 / 메모리 효율 좋음
                   실행해야만 오류 발견 / Python, Ruby, Javascript

c+tab -> 주석





wrap ==> 아래의 레이아웃을 묶어주는 성질
wrap {margin: 0 auto;} ==> 가운데 정렬(위아래 간격 0, 좌우 간격 자동)
wrap {text-transform: uppercase}  ==> 바디의 텍스트를 대문자로

float: letf; ==> 블록구조 정렬
clear: both; ==> 플롯 레프트의 성질을 차단시켜주는 속성
line-height: ~px;  => 문장과 문장사이의 간격을 설정 
 (각 레이아웃의 height와 동일하게 설정시 텍스트를 정중앙에 오게 만듦)

* {margin: 0; padding: 0;} -> 약식 전체 선택자 (실무에서는 안 씀)
                                     바탕여백을 0으로 만듦

width값은 100%가 기본값, 100%로 하려면 굳이 적을 필요없다.
height값이 부모와 자식이 동일하면 부모쪽은 굳이 적을 필요없다.


background: #999; 			==> 헥사코어 모드
background: rgba(0,0,0,0.3); 		==> rgba모드
                        r,g,b,코드(투명도 0부터 1사이의 실수)
height: inherit 	 ==> 위에 있는 부모의 속성을 상속받음
		         사이즈 뿐만 아니라 컬러 등의 여러 속성에도 적용이 된다.



뉴렉처 -> 백엔드 위주 
Webstoryboy


<CSS>
@charset "utf-8";    ===> 전세계 언어 지정해주는 명령어 (한글도 안깨지고 호환 가능하게 됨)
*항상 레이아웃을 잡은 후에는 확인을 위해서 백그라운드를 임시로 만들어 영역이 제대로 잡혔는지 확인하는 습관이 필요함